# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: payload.proto

require 'google/protobuf'


descriptor_data = "\n\rpayload.proto\"c\n\x0ePayloadMessage\x12\x15\n\rcustomer_name\x18\x01 \x01(\t\x12\n\n\x02id\x18\x02 \x01(\r\x12\x0f\n\x07\x63reated\x18\x03 \x01(\t\x12\x0c\n\x04\x63ost\x18\x04 \x01(\r\x12\x0f\n\x07id_uuid\x18\x05 \x01(\t\"B\n\x0fResponseMessage\x12\x15\n\rresponse_code\x18\x01 \x01(\x05\x12\x18\n\x10response_message\x18\x02 \x01(\t2I\n\x08\x44\x65mogRPC\x12=\n\x16GetResponseFromPayload\x12\x0f.PayloadMessage\x1a\x10.ResponseMessage\"\x00\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

PayloadMessage = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("PayloadMessage").msgclass
ResponseMessage = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("ResponseMessage").msgclass
